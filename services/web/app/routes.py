"""
This script contains endpoints definitions
"""
import sys
from flask import render_template, redirect, request, Response
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from . import app, db
from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash
from config import Config
import base64

app.config.from_object(Config)


limiter = Limiter(app, default_limits=app.config["RATE_LIMITS"], key_func=get_remote_address)
# limiter.init_app(app) 


auth = HTTPBasicAuth()
users = {
    "admin": generate_password_hash(Config.PASSWORD)
}


@auth.verify_password
def verify_password(username, password):
    if username in users and \
            check_password_hash(users.get(username), password):
        return username


@app.route('/', methods = ['GET', 'POST'], defaults={'path': ''})
@auth.login_required
def exploit_data(path):
    if request.method == "GET":
        return render_template("index.html", exploit_path="/exploit", exploit_header="Content-Type: text/html; charset=utf-8", exploit_body="Hello World!")

    if request.method == "POST":
        # save data
        print(request.form)
        protocol = 'https' if 'exploit-https' in request.form.keys() else 'http'
        formAction = request.form['formAction']
        if formAction == "STORE" or formAction == "View Exploit":
            request_path = base64.b64encode(request.form['exploit-file'].encode()).decode()
            request_headers = base64.b64encode(request.form['exploit-header'].encode()).decode()
            request_body = base64.b64encode(request.form['exploit-body'].encode()).decode()

            db_query = f"INSERT OR REPLACE INTO exploits (path, header, body) VALUES('{request_path}', '{request_headers}' , '{request_body}');"
            db.engine.execute(db_query)

            # get newly saved data
            db_query = f"SELECT path, header, body FROM exploits WHERE path = '{request_path}'"
            res = db.engine.execute(db_query)
            print("INSERTED")
            data = res.fetchall()
            print(data)
            response_path = base64.b64decode(data[0][0].encode()).decode()
            response_headers = base64.b64decode(data[0][1].encode()).decode()
            response_data = base64.b64decode(data[0][2].encode()).decode()
    

            # redirect if viewing exploit
            if formAction == "View Exploit":
                return redirect(f"{protocol}://{request.headers['Host']}{request.form['exploit-file']}", 302)
            return render_template("index.html", exploit_path=response_path, exploit_header=response_headers, exploit_body=response_data)

        elif formAction == "DELETE ALL RECORDS":
            db_query = f"DELETE FROM exploits"
            res = db.engine.execute(db_query)
            return redirect("/", 302)
    return render_template("index.html", exploit_path="/exploit", exploit_header="Content-Type: text/html; charset=utf-8", exploit_body="Hello World!")



@app.route('/<path:path>', methods = ['GET'])
def index(path):
    print(f"path: {path}")
    request_path = base64.b64encode(("/" + path).encode()).decode()

    # get data from db + surface
    db_query = f"SELECT path, header, body FROM exploits WHERE path = '{request_path}';"
    res = db.engine.execute(db_query)
    data = res.fetchall()
    if data:
        response_headers = base64.b64decode(data[0][1].encode()).decode()
        response_data = base64.b64decode(data[0][2].encode()).decode()
    
        # set content
        resp = Response(response_data)

        # set headers
        for header in response_headers.split('\r\n'):
            if ':' in header:
                resp.headers[header.split(':')[0]] = header.split(':')[1]
        return resp
    return Response("default response")

    